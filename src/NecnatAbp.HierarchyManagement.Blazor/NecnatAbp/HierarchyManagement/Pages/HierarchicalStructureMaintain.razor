@page "/HierarchyManagement/HierarchicalStructure/Maintain"
@using Blazorise.TreeView
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using NecnatAbp.HierarchyManagement
@using NecnatAbp.HierarchyManagement.Components
@using NecnatAbp.HierarchyManagement.Permissions
@using Volo.Abp.AspNetCore.Components
@using global::NecnatAbp.HierarchyManagement.Localization
@inject IStringLocalizer<HierarchyManagementResource> LL
@inject IHierarchicalStructureAppService AppService
@inherits AbpComponentBase

<div class="container">
    <div class="page-title">@LL["Edit"] @LL["Hierarchical Structure"]</div>
    <Card>
        <CardBody>
            <HierarchicalStructureTree @ref="@hierarchicalStructureTreeRef" @bind-SelectedHierarchy="@selectedHierarchy">
                <NodeContent>
                    @if (context.HierarchyComponentType == null || hierarchyComponentTypeList == null || (!hierarchyComponentTypeList.Any(x => x.Id == context.HierarchyComponentType)))
                    {
                        <i class="fas fa-star-of-life"></i>
                    }
                    else
                    {
                        <i class="@hierarchyComponentTypeList.Where(x => x.Id == context.HierarchyComponentType).First().Icon"></i>
                    }
                    <Span Class="ps-1">@(hierarchyComponentList.Where(x => x.HierarchyComponentType == context.HierarchyComponentType && x.Id == @context.HierarchyComponentId).FirstOrDefault()?.Name)</Span>
                    <Icon Class="ps-1" Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlusCircle" Clicked="@(async () => await OpenCreateModalAsync(context.Id))" />
                    <Icon Class="ps-1" Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.TimesCircle" Clicked="@(async () => await DeleteAsync(context.Id))" />
                </NodeContent>
                <EmptyContent>
                    <span class="page-text pl-4">@LL["Initialize the Hierarchical Structure"]</span>
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.PlusCircle" Clicked="@(async () => await OpenCreateModalAsync(null))" />
                </EmptyContent>
            </HierarchicalStructureTree>
        </CardBody>
    </Card>
</div>
<Modal @ref="@CreateModal">
    <ModalContent Size="ModalSize.ExtraLarge" Centered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@LL["Add"] @LL["Hierarchy Component"]</ModalTitle>
                    <CloseButton Clicked="CloseCreateModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@CreateValidationsRef" Mode="ValidationMode.Manual" ValidateOnLoad="false">
                        <Fields>
                            <Validation Validator="@ValidateHierarchyComponent">
                                <HierarchyComponentSelectList @ref="@hierarchyComponentSelectListRef" @bind-SelectedHierarchyComponent="hierarchyComponent" HierarchyComponentTypeList="hierarchyComponentTypeList" HierarchyComponentList="hierarchyComponentList" />
                            </Validation>
                        </Fields>
                        <Blazorise.ValidationSummary />
                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="CloseCreateModalAsync">
                        @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@namespace NecnatAbp.HierarchyManagement.Pages
@code {

    HierarchicalStructureTree? hierarchicalStructureTreeRef;
    HierarchyDto? selectedHierarchy;
    List<HierarchyComponentDto> hierarchyComponentList = new List<HierarchyComponentDto>();
    List<HierarchyComponentTypeDto> hierarchyComponentTypeList = new List<HierarchyComponentTypeDto>();

    protected override async Task OnInitializedAsync()
    {
        hierarchyComponentList = await AppService.ListHierarchyComponentAsync();
        hierarchyComponentTypeList = await AppService.ListHierarchyComponentTypeAsync();

        await base.OnInitializedAsync();
    }

    #region CreateModal

    HierarchyComponentSelectList? hierarchyComponentSelectListRef;
    protected Modal? CreateModal;
    protected Validations? CreateValidationsRef;
    protected CreateUpdateHierarchicalStructureDto? NewEntity;

    HierarchyComponentDto hierarchyComponent = new HierarchyComponentDto();

    protected virtual async Task OpenCreateModalAsync(Guid? hierarchicalStructureIdPai)
    {
        try
        {
            if (CreateValidationsRef != null)
            {
                await CreateValidationsRef.ClearAll();
            }

            await AuthorizationService.CheckAsync(HierarchyManagementPermissions.HierarchicalStructures.Create);

            NewEntity = new CreateUpdateHierarchicalStructureDto();
            NewEntity.ParentId = hierarchicalStructureIdPai;

            // Mapper will not notify Blazor that binded values are changed
            // so we need to notify it manually by calling StateHasChanged
            await InvokeAsync(async () =>
            {
                StateHasChanged();
                if (CreateModal != null)
                {
                    await CreateModal.Show();
                }

            });
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    protected virtual async Task CloseCreateModalAsync()
    {
        NewEntity = new CreateUpdateHierarchicalStructureDto();
        hierarchyComponentSelectListRef!.Clear();
        await InvokeAsync(CreateModal!.Hide);
    }

    protected virtual async Task CreateEntityAsync()
    {
        try
        {
            var validate = true;
            if (CreateValidationsRef != null)
            {
                validate = await CreateValidationsRef.ValidateAll();
            }
            if (validate)
            {
                await AuthorizationService.CheckAsync(HierarchyManagementPermissions.HierarchicalStructures.Create);

                NewEntity!.HierarchyId = selectedHierarchy!.Id;
                NewEntity.HierarchyComponentType = (int)hierarchyComponent.HierarchyComponentType!;
                NewEntity.HierarchyComponentId = (Guid)hierarchyComponent.Id!;

                await AppService.CreateAsync(NewEntity);

                await OnCreatedEntityAsync();
            }
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    protected virtual async Task OnCreatedEntityAsync()
    {
        NewEntity = new CreateUpdateHierarchicalStructureDto();
        hierarchyComponentSelectListRef!.Clear();
        await hierarchicalStructureTreeRef!.RefreshAsync();
        await InvokeAsync(CreateModal!.Hide);
    }

    void ValidateHierarchyComponent(ValidatorEventArgs e)
    {
        e.ErrorText = hierarchyComponent?.HierarchyComponentType == null ? (string.Format(@LL["The field {0} is required"], @LL["Hierarchy Component Type"])) :
            hierarchyComponent?.Id == null ? (string.Format(@LL["The field {0} is required"], @LL["Hierarchy Component"])) : null;
        e.Status = e.ErrorText == null ? ValidationStatus.None : ValidationStatus.Error;
    }

    #endregion

    public async Task DeleteAsync(Guid id)
    {
        var confirmed = await Message.Confirm(@LL["Are you sure you want to delete this record and all of its children?"]);
        if (confirmed)
        {
            try
            {
                await AuthorizationService.CheckAsync(HierarchyManagementPermissions.HierarchicalStructures.Delete);
                await AppService.DeleteAsync(id);

                await hierarchicalStructureTreeRef!.RefreshAsync();
            }
            catch (Exception ex)
            {
                await HandleErrorAsync(ex);
            }
        }
    }
} 